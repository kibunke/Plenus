<?php

namespace InscripcionBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PlanillaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanillaRepository extends EntityRepository
{
    public function count()
    {
        return  $this->getEntityManager()
                        ->createQuery(" SELECT COUNT(p)
                                        FROM InscripcionBundle:Planilla p")
                        ->getArrayResult();
    }

    public function getDashboard()
    {
        return  $this->getEntityManager()
                        ->createQuery(" SELECT t.id, t.nombre, sex.nombre as sexoNombre, COUNT(DISTINCT(p)) as planillas, COUNT(DISTINCT(e)) as equipos, COUNT(DISTINCT(c)) as inscriptos, COUNT(sex) as sexo
                                        FROM InscripcionBundle:Planilla p
                                        JOIN p.segmento s
                                        JOIN s.torneo t
                                        LEFT JOIN p.equipos e
                                        LEFT JOIN e.equipoCompetidores ec
                                        LEFT JOIN ec.competidor c
                                        LEFT JOIN c.genero sex
                                        GROUP BY t.id,sex.id")
                        ->getArrayResult();
    }

    private $onlyPendientes = false;
    private $idEstados;

    public function dataTable($request,$user)
    {
        $this->onlyPendientes = false;
        return array(
                      "total"    => $this->getTotalRows($user),
                      "filtered" => $this->getFilteredRows($request,$user),
                      "rows"     => $this->getRows($request,$user),
            );
    }

    public function dataTableAccPendientes($request,$user)
    {
        $this->onlyPendientes = true;
        return array(
                "total"    => $this->getTotalRows($user),
                "filtered" => $this->getFilteredRows($request,$user),
                "rows"     => $this->getRows($request,$user),
            );
    }

    public function getRows($request,$user)
    {
        $columns = ["p.id",
                    "d.nombre ".$request->get('order')[0]['dir'].
                    ",s.nombre ",
                    ""];
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('p')
                        ->from('InscripcionBundle:Planilla', 'p')
                        ->join('p.municipio', 'municipio')
                        //->join('p.estado', 'estado')
                        ->join('p.segmento', 's')
                        ->join('s.disciplina', 'd');
        $query->where(' (p.id LIKE ?1 OR
                        s.nombre LIKE ?1 OR
                        municipio.nombre LIKE ?1 OR
                        d.nombre LIKE ?1)');
        $query = $this->applyRoleFilter($user,$query);

        $searchValue = '%'.$request->get('search')['value'].'%';
        return $query->setParameter(1,$searchValue)
                    ->orderBy($columns[$request->get('order')[0]['column']],$request->get('order')[0]['dir'])
                    ->groupBy('p.id')
                    ->setMaxResults($request->get('length'))
                    ->setFirstResult($request->get('start'))
                    ->getQuery()
                    ->getResult();
    }

    public function getFilteredRows($request,$user)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('COUNT(DISTINCT(p.id))')
                        ->from('InscripcionBundle:Planilla', 'p')
                        ->join('p.municipio', 'municipio')
                        //->join('p.estado', 'estado')
                        ->join('p.segmento', 's')
                        ->join('s.disciplina', 'd');
        $query->where(' (p.id LIKE ?1 OR
                        s.nombre LIKE ?1 OR
                        municipio.nombre LIKE ?1 OR
                        d.nombre LIKE ?1)');
        $query = $this->applyRoleFilter($user,$query);

        $searchValue = '%'.$request->get('search')['value'].'%';
        return $query
                    ->setParameter(1,$searchValue)
                    ->getQuery()
                    ->getSingleScalarResult();
    }

    public function getTotalRows($user)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('COUNT(DISTINCT(p.id))')
                        ->from('InscripcionBundle:Planilla', 'p')
                        ->join('p.municipio', 'municipio')
                        ->join('p.estado', 'estado')
                        ->join('p.segmento', 's')
                        ->join('s.disciplina', 'd');
        $query = $this->applyRoleFilter($user,$query);

        return $query->getQuery()
                    ->getSingleScalarResult();
    }



    // public function getAccPendientesRows($request,$user,$auth_checker)
    // {
    //     $where = "( p.id LIKE ?1 OR
    //                 s.nombre LIKE ?1 OR
    //                 municipio.nombre LIKE ?1)". $this->applyRoleFilter($user,$auth_checker);
    //     return $this->getEntityManager()
    //                     ->createQuery(" SELECT p
    //                                     FROM InscripcionBundle:Planilla p
    //                                     JOIN p.municipio municipio
    //                                     JOIN p.segmento s
    //                                     JOIN p.createdBy creador
    //                                     LEFT JOIN s.coordinadores coordinador
    //                                     JOIN p.estados est
    //                                     WHERE $where
    //                                     GROUP BY p ")
    //                     ->setParameter(1,'%'.$request->get('search')['value'].'%')
    //                     ->setMaxResults($request->get('length'))
    //                     ->setFirstResult($request->get('start'))
    //                     ->getResult();
    // }
    //
    // public function getFilteredAccPendientesRows($request,$user,$auth_checker)
    // {
    //     $where = "( p.id LIKE ?1 OR
    //                 s.nombre LIKE ?1 OR
    //                 municipio.nombre LIKE ?1)". $this->applyRoleFilter($user,$auth_checker);
    //     return $this->getEntityManager()
    //                     ->createQuery(" SELECT COUNT(DISTINCT(p))
    //                                     FROM InscripcionBundle:Planilla p
    //                                     JOIN p.municipio municipio
    //                                     JOIN p.segmento s
    //                                     JOIN p.createdBy creador
    //                                     LEFT JOIN s.coordinadores coordinador
    //                                     JOIN p.estados est
    //                                     WHERE $where ")
    //                     ->setParameter(1,'%'.$request->get('search')['value'].'%')
    //                     ->getSingleScalarResult();
    // }
    //
    // public function getTotalAccPendientesRows($user,$auth_checker)
    // {
    //     return $this->getEntityManager()
    //                     ->createQuery(" SELECT COUNT(DISTINCT(p))
    //                                     FROM InscripcionBundle:Planilla p
    //                                     JOIN p.municipio municipio
    //                                     JOIN p.segmento s
    //                                     JOIN p.createdBy creador
    //                                     LEFT JOIN s.coordinadores coordinador
    //                                     JOIN p.estados est
    //                                     WHERE 1 = 1 ".$this->applyRoleFilter($user,$auth_checker))
    //                     ->getSingleScalarResult();
    // }

    private function applyRoleFilter($user,$query)
    {
        // if ($this->onlyPendientes){
        //     $where = " AND est.id IN (".$this->idEstados.")";
        // }
        if(!$query->hasRole('ROLE_ADMIN')){
            if($query->hasRole('ROLE_COORDINADOR')){
                //COORDINADORES ven todas las planillas de sus Segmentos
                $query->join('s.coordinadores', 'coordinador');
                $query->andwhere("coordinador.id = ".$user->getId());
                //En mis pendientes ven solo las que estan en estado Presentada más las creadas por ellos en estado Cargada , en revision y observadas
                if ($this->onlyPendientes){
                    $query->andwhere("(estado.nombre = 'Presentada' OR (creador.id = " . $user->getId() ." AND (estado.nombre = 'Cargada' OR estado.nombre = 'En Revisión' OR estado.nombre = 'Observada')))");
                    //$where .= " AND (est.nombre = 'Presentada' OR (creador.id = " . $user->getId() ." AND (est.nombre = 'Cargada' OR est.nombre = 'En Revisión' OR est.nombre = 'Observada')))";
                }
            }elseif($query->hasRole('ROLE_ORGANIZADOR')){
                //ORGANIZADORES ven todas las planillas de su Municipio
                $query->andwhere("municipio.id = ".$user->getMunicipio()->getId());
                //$where .= " AND (municipio.id = " . $user->getMunicipio()->getId() . ")";
                //En mis pendientes ven solo las que estan en estado Enviada u Observadas más las creadas por ellos en estado Cargada o En revision
                if ($this->onlyPendientes){
                    $query->andwhere("(estado.nombre = 'Enviada' OR estado.nombre = 'Observada' OR (creador.id = " . $user->getId() ." AND (estado.nombre = 'Cargada' OR estado.nombre = 'En Revisión')))");
                    //$where .= " AND (est.nombre = 'Enviada' OR est.nombre = 'Observada' OR (creador.id = " . $user->getId() ." AND (est.nombre = 'Cargada' OR est.nombre = 'En Revisión')))";
                }
            }else{
                //INSCRIPTORES ven todas las planillas que crearon
                //$where .= " AND (creador.id = " . $user->getId() . ")";
                $query->andwhere("p.createdBy = ".$user->getId());
                //En mis pendientes ven solo las que estan en estado Carga o En revision
                if ($this->onlyPendientes){
                    //$where .= " AND (est.nombre = 'Cargada' OR est.nombre = 'En Revisión')";
                    $query->andwhere("(estado.nombre = 'Cargada' OR estado.nombre = 'En Revisión')");
                }
            }
        }else{
            //En mis pendientes ven las que estan en estado Aprobada
            if ($this->onlyPendientes){
                    //$where .= " AND (est.nombre = 'Aprobada')";
                    $query->andwhere("(estado.nombre = 'Aprobada')");
                }
        }
        return $query;
    }

    //public function findAllByEvento($evento)
    //{
    //    return $this->createQueryBuilder('i')
    //        ->where('i.evento = ?1')
    //        ->setParameter(1, $evento)->getQuery()->getResult();
    //}
    //
    //public function countInscriptosByTorneo()
    //{
    //    $q=$this->getEntityManager()->createQuery(' SELECT t.id,t.nombre, SUM(i.cantidadFemeninos) as fem,SUM(i.cantidadMasculinos) as mas,SUM(i.cantidadMasculinos+i.cantidadFemeninos) as total
    //                                                FROM InscripcionBundle:Inscripto i
    //                                                JOIN i.evento e
    //                                                JOIN e.torneo t
    //                                                GROUP BY t.id
    //                                                ORDER BY t.id DESC'
    //            );
    //    return $q->getResult();
    //}
    //
    //public function getMunicipiosSinInscriptos()
    //{
    //    $q=$this->getEntityManager()->createQuery('
    //                                                SELECT m
    //                                                FROM CommonBundle:Partido m
    //                                                WHERE m.provincia = 1 AND m.id NOT IN (
    //                                                    SELECT m1.id
    //                                                    FROM InscripcionBundle:Inscripto i
    //                                                    JOIN i.municipio m1)'
    //            );
    //    return $q->getResult();
    //}
    //
    //public function getProgreso()
    //{
    //    $em=$this->getEntityManager();
    //    $q='SELECT SUM(i.cantidadMasculinos + i.cantidadFemeninos) as cant, DATE_FORMAT(i.createdAt,"%d-%m-%Y") as fecha
    //        FROM services_juegosba_final.Inscripto i
    //        WHERE DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)<= DATE(i.createdAt)
    //        GROUP BY fecha
    //        ORDER BY i.createdAt ASC';
    //    return $em->getConnection()->query($q)->fetchAll();
    //}
}
