<?php

namespace InscripcionBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SegmentoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SegmentoRepository extends EntityRepository
{
    public function dataTable($request,$user,$auth_checker)
    {
        return array(
                      "total"    => $this->getTotalRows($user),
                      "filtered" => $this->getFilteredRows($request,$user),
                      "rows"     => $this->getRows($request,$user),
                      "actives"   => $this->getActives($user)
            );
    }

    private function applyRoleAndPlanillaFilter($user,$query)
    {
        if(!$user->hasRole('ROLE_ADMIN')){
            if($user->hasRole('ROLE_COORDINADOR')){
                //COORDINADORES ven todas las planillas de sus Segmentos
                $query
                    ->join('segmento.coordinadores', 'coordinador')
                    ->andwhere('coordinador.id = '.$user->getId());
            }elseif($user->hasRole('ROLE_ORGANIZADOR')){
                //ORGANIZADORES ven todas las planillas de su Municipio
                $query
                    ->andwhere('planilla.municipio = '.$user->getMunicipio()->getId());
            }else{
                //INSCRIPTORES ven todas las planillas que crearon
                $query
                    ->andwhere('planilla.createdBy = '.$user->getId());
            }
        }
        return $query;
    }

    public function getRows($request,$user)
    {
        $columns = ["segmento.id",
                    "disciplina.nombreRecursivo ".$request->get('order')[0]['dir'].
                    ",categoria.nombre ".$request->get('order')[0]['dir'].
                    ",genero.nombre ".$request->get('order')[0]['dir'].
                    ",modalidad.nombre ".$request->get('order')[0]['dir'].
                    ",segmento.nombre",
                    "planillas",
                    "inscriptos",
                    "eventos",
                    "coordinadores"];

        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('segmento,segmento.id AS HIDDEN, COUNT(DISTINCT(evento)) AS HIDDEN eventos, COUNT(DISTINCT(equipoCompetidor.competidor)) as HIDDEN inscriptos, COUNT(DISTINCT(planilla)) as HIDDEN planillas')
                        ->from('InscripcionBundle:Segmento', 'segmento')
                        ->join('segmento.disciplina', 'disciplina')
                        ->join('segmento.torneo', 'torneo')
                        ->join('segmento.categoria', 'categoria')
                        ->join('segmento.modalidad', 'modalidad')
                        ->join('segmento.genero', 'genero')
                        ->leftjoin('segmento.eventos', 'evento')
                        ->leftjoin('segmento.planillas', 'planilla')
                        ->leftjoin('planilla.equipos', 'equipo')
                        ->leftjoin('equipo.equipoCompetidores', 'equipoCompetidor');
        $query = $this->applyRoleAndPlanillaFilter($user,$query);
        $searchValue = '%'.$request->get('search')['value'].'%';
        return $query
                    ->andwhere('(segmento.id LIKE ?1 OR
                                segmento.nombre LIKE ?1 OR
                                disciplina.nombreRecursivo LIKE ?1 OR
                                torneo.nombre LIKE ?1 OR
                                genero.nombre LIKE ?1 OR
                                categoria.nombre LIKE ?1 OR
                                modalidad.nombre LIKE ?1)')
                    ->setParameter(1,$searchValue)
                    ->orderBy($columns[$request->get('order')[0]['column']],$request->get('order')[0]['dir'])
                    ->groupBy('segmento.id')
                    ->setMaxResults($request->get('length'))
                    ->setFirstResult($request->get('start'))
                    ->getQuery()
                    ->getResult();
    }

    public function getFilteredRows($request,$user)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('COUNT(DISTINCT(segmento.id))')
                        ->from('InscripcionBundle:Segmento', 'segmento')
                        ->leftjoin('segmento.planillas', 'planilla')
                        ->join('segmento.disciplina', 'disciplina')
                        ->join('segmento.torneo', 'torneo')
                        ->join('segmento.categoria', 'categoria')
                        ->join('segmento.modalidad', 'modalidad')
                        ->join('segmento.genero', 'genero');
        $query = $this->applyRoleAndPlanillaFilter($user,$query);
        $searchValue = '%'.$request->get('search')['value'].'%';
        return $query
                    ->andwhere('(segmento.id LIKE ?1 OR
                                segmento.nombre LIKE ?1 OR
                                disciplina.nombreRecursivo LIKE ?1 OR
                                torneo.nombre LIKE ?1 OR
                                genero.nombre LIKE ?1 OR
                                categoria.nombre LIKE ?1 OR
                                modalidad.nombre LIKE ?1)')
                    ->setParameter(1,$searchValue)
                    ->getQuery()
                    ->getSingleScalarResult();
    }

    public function getTotalRows($user)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('COUNT(DISTINCT(segmento.id))')
                        ->from('InscripcionBundle:Segmento', 'segmento')
                        ->leftjoin('segmento.planillas', 'planilla');
        $query = $this->applyRoleAndPlanillaFilter($user,$query);
        return $query
                    ->getQuery()
                    ->getSingleScalarResult();
    }

    public function getActives($user)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('COUNT(DISTINCT(segmento.id))')
                        ->from('InscripcionBundle:Segmento', 'segmento')
                        ->where('segmento.isActive = 1');
        $query = $this->applyRoleAndPlanillaFilter($user,$query);
        return $query
                    ->getQuery()
                    ->getSingleScalarResult();
    }

    public function getTotalInscriptos($segmento,$user)
    {

        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('COUNT(DISTINCT(equipoCompetidor.competidor)) as cant, estado.nombre')
                        ->from('InscripcionBundle:Segmento', 'segmento')
                        ->join('segmento.planillas', 'planilla')
                        ->join('planilla.estado', 'estado')
                        ->join('planilla.equipos', 'equipo')
                        ->join('equipo.equipoCompetidores', 'equipoCompetidor')
                        ->where('segmento.id = ?1');
        $query = $this->applyRoleAndPlanillaFilter($user,$query);
        return $query
                    ->setParameter(1,$segmento->getId())
                    ->groupBy('segmento.id')
                    ->getQuery()
                    ->getScalarResult();
    }

    public function getTotalPlanillas($user,$segmento)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('COUNT(DISTINCT(planilla.id))')
                        ->from('InscripcionBundle:Segmento', 'segmento')
                        ->join('segmento.planillas', 'planilla')
                        ->where('segmento.id = ?1');
        $query = $this->applyRoleAndPlanillaFilter($user,$query);
        return $query
                    ->setParameter(1,$segmento->getId())
                    ->getQuery()
                    ->getSingleScalarResult();
    }

    public function getTotalEventos($segmento)
    {
        return $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('COUNT(e.id)')
                        ->from('ResultadoBundle:Evento', 'e')
                        ->where('e.segmento = ?1')
                    ->setParameter(1,$segmento->getId())
                    ->getQuery()
                    ->getSingleScalarResult();
    }

    public function dataTableInscripcion($request,$user,$auth_checker)
    {
        return array(
                      "total"    => $this->getTotalInscripcionRows($user,$auth_checker),
                      "filtered" => $this->getFilteredInscripcionRows($request,$user,$auth_checker),
                      "rows"     => $this->getInscripcionRows($request,$user,$auth_checker),
                      "actives"   => $this->getActives($user,$auth_checker)
            );
    }

    public function getInscripcionRows($request,$user,$auth_checker)
    {
        $columns = ["s.id",
                    "d.nombreRecursivo ".$request->get('order')[0]['dir'].
                    ",s.nombre ",
                    "",
                    "",
                    "",
                    ""];
        $where = "( s.id LIKE ?1 OR
                    s.nombre LIKE ?1 OR
                    d.nombre LIKE ?1 OR
                    d.nombreRecursivo LIKE ?1)";
        if($user->hasRole('ROLE_COORDINADOR')){
            //COORDINADORES ven los sus Segmentos
            $where .= " AND (coordinador.id = " . $user->getId().")";
        }
        return $this->getEntityManager()
                        ->createQuery(" SELECT s
                                        FROM InscripcionBundle:Segmento s
                                        JOIN s.disciplina d
                                        LEFT JOIN s.coordinadores coordinador
                                        WHERE $where
                                        GROUP BY s
                                        ORDER BY ".$columns[$request->get('order')[0]['column']]." ".$request->get('order')[0]['dir'])
                        ->setParameter(1,'%'.$request->get('search')['value'].'%')
                        ->setMaxResults($request->get('length'))
                        ->setFirstResult($request->get('start'))
                        ->getResult();
    }

    public function getFilteredInscripcionRows($request,$user,$auth_checker)
    {
        $where = "( s.id LIKE ?1 OR
                    s.nombre LIKE ?1 OR
                    d.nombre LIKE ?1 OR
                    d.nombreRecursivo LIKE ?1)";
        if($user->hasRole('ROLE_COORDINADOR')){
            //COORDINADORES ven los sus Segmentos
            $where .= " AND (coordinador.id = " . $user->getId().")";
        }
        return $this->getEntityManager()
                        ->createQuery(" SELECT COUNT(DISTINCT(s))
                                        FROM InscripcionBundle:Segmento s
                                        JOIN s.disciplina d
                                        LEFT JOIN s.coordinadores coordinador
                                        WHERE $where")
                        ->setParameter(1,'%'.$request->get('search')['value'].'%')
                        ->getSingleScalarResult();
    }

    public function getTotalInscripcionRows($user,$auth_checker)
    {
        $where = '1 = 1';
        if($user->hasRole('ROLE_COORDINADOR')){
            //COORDINADORES ven los sus Segmentos
            $where = " coordinador.id = " . $user->getId();
        }
        return $this->getEntityManager()
                        ->createQuery(" SELECT COUNT(DISTINCT(s))
                                        FROM InscripcionBundle:Segmento s
                                        LEFT JOIN s.coordinadores coordinador
                                        WHERE $where ")
                        ->getSingleScalarResult();
    }

    /*
     * Se utiliza para armar el arbol de segmentos de inscripcion
    */
    public function getAllConNombre($security = NULL)
    {
        $q=" SELECT t.id as torneo,
                    d.id as disciplina,
                    s.id as segmento,
                    CONCAT(t.nombre,'-',d.nombre,'-',c.nombre,'-',g.nombre,'-',m.nombre) as nombre
            FROM InscripcionBundle:Segmento s
            JOIN s.torneo t
            JOIN s.disciplina d
            JOIN s.categoria c
            JOIN s.modalidad m
            JOIN s.genero g
            WHERE 1 = 1";

        if ($security && !$security->isGranted('ROLE_DIRECTOR')){
            $q = $this->getEntityManager()->createQuery($q." AND ?1 MEMBER OF s.coordinadores ORDER BY t.id,d.id,s.id")
                        ->setParameter(1, $security->getToken()->getUser()->getId());
        }else{
            $q = $this->getEntityManager()->createQuery($q." ORDER BY t.id,d.id,s.id");
        }

        return $q->getArrayResult();
    }

    public function getResumenPorSegmentos($segmentos, $soloAprobadas = FALSE)
    {
        if (!$segmentos) return [];
        if ($soloAprobadas){
            $query= '
                    SELECT m.id,m.nombre,m.cruceRegional,m.regionDeportiva,pla.segmento, pla.planillas, pla.equipos, pla.inscriptos
                    FROM Municipio as m
                    LEFT JOIN (
                        SELECT p.segmento, p.municipio, COUNT(p.id) as "planillas", COUNT(Equipo.id) as "equipos", COUNT(EquiposCompetidores.id) as "inscriptos"
                        FROM Planilla as p
                        INNER JOIN Equipo ON Equipo.planilla = p.id
                        INNER JOIN EquiposCompetidores ON EquiposCompetidores.equipo_id = Equipo.id
                        INNER JOIN PlanillaEstado pe ON pe.planilla = p.id
                        WHERE p.segmento IN ('.implode(',', $segmentos).') AND pe.nombre = "Aprobada")
                        GROUP BY p.segmento,p.municipio
                    ) as pla ON pla.municipio = m.id
                    WHERE m.idProvincia = 1
                    ORDER BY m.id,pla.segmento
                ';
        }else{
            $query= '
                    SELECT m.id,m.nombre,m.cruceRegional,m.regionDeportiva,pla.segmento, pla.planillas, pla.equipos, pla.inscriptos
                    FROM Municipio as m
                    LEFT JOIN (
                        SELECT p.segmento, p.municipio, COUNT(p.id) as "planillas", COUNT(Equipo.id) as "equipos", COUNT(EquiposCompetidores.id) as "inscriptos"
                        FROM Planilla as p
                        INNER JOIN Equipo ON Equipo.planilla = p.id
                        INNER JOIN EquiposCompetidores ON EquiposCompetidores.equipo_id = Equipo.id
                        WHERE p.segmento IN ('.implode(',', $segmentos).')
                        GROUP BY p.segmento,p.municipio
                    ) as pla ON pla.municipio = m.id
                    WHERE m.idProvincia = 1
                    ORDER BY m.id,pla.segmento
                ';
        }
            //var_dump($query);die;
        return $this->getEntityManager()->getConnection()->query($query)->fetchAll();
    }
}
