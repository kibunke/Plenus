<?php

namespace AcreditacionBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PersonalJuegosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonalJuegosRepository extends EntityRepository {

    /**
     * Retorna el listado de Personal de los Juegos BA que estan cargados en un area cuyo id se proporciona como parámetro
     */
    public function getAcreditadosAll($idArea) {
        return $this->createQueryBuilder('personal')
                        ->innerJoin('personal.area', 'area')
                        ->where('area.id = ?1')
                        ->setParameter(1, $idArea)->getQuery()->getResult();
    }

    /**
     * Retorne los acreditados ACTIVOS que son de un area determinada. El area se recibe como parámetro
     */
    public function getAcreditados($idArea) {
        return $this->createQueryBuilder('personal')
                        ->innerJoin('personal.area', 'area')
                        ->where('area.id = ?1')
                        ->andWhere('personal.activo = 1')
                        ->setParameters(array(1 => $idArea))
                        ->getQuery()->getResult();
    }

    /**
     *
     */
    public function getHospedados($idArea) {
        return $this->createQueryBuilder('personal')
                        ->innerJoin('personal.area', 'area')
                        ->innerJoin('personal.datosOperativo', 'do')
                        ->where('area.id = ?1')
                        ->andWhere('personal.activo = 1')
                        ->andWhere('do.necesitaHospedaje = true')
                        ->setParameters(array(1 => $idArea))
                        ->getQuery()->getResult();
    }

    /**
     * 
     */
    public function getHospedadosAll() {
        return $this->createQueryBuilder('personal')
                        ->innerJoin('personal.datosOperativo', 'do')
                        ->where('personal.activo = 1')
                        ->andWhere('do.necesitaHospedaje = true')
                        ->getQuery()->getResult();
    }

    /**
     * Retorne los acreditados ACTIVOS de una categoria de pago determinada. La categoria y el área se reciben como parámetros
     */
    public function getAcreditadosCategoria($idArea, $categoria) {
        return $this->createQueryBuilder('personal')
                        ->innerJoin('personal.area', 'area')
                        ->innerJoin('personal.datosTesoreria', 'dt')
                        ->innerJoin('dt.categoriaPago', 'cp')
                        ->where('area.id = ?1')
                        ->andWhere('cp.nombre = ?2')
                        ->andWhere('personal.activo = 1')
                        ->setParameters(array(1 => $idArea, 2 => $categoria))
                        ->getQuery()->getResult();
    }

    /**
     * Retorne los acreditados que necesitan transporte de un ára determinada
     */
    public function getTransportados($idArea) {
        return $this->createQueryBuilder('personal')
                        ->innerJoin('personal.area', 'area')
                        ->innerJoin('personal.datosOperativo', 'do')
                        ->where('area.id = ?1')
                        ->andWhere('do.necesitaTransporte = true')
                        ->andWhere('personal.activo = 1')
                        ->setParameters(array(1 => $idArea))
                        ->getQuery()->getResult();
    }

    /**
     * Retorne los acreditados que necesitan transporte
     */
    public function getTransportadosAll() {
        return $this->createQueryBuilder('personal')
                        ->innerJoin('personal.datosOperativo', 'do')
                        ->andWhere('do.necesitaTransporte = true')
                        ->andWhere('personal.activo = 1')
                        ->getQuery()->getResult();
    }

}
