<?php

namespace JuegosBA\ResultadoBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use JuegosBA\CommonBundle\Entity\Persona;
/**
 * JuegosBA\ResultadoBundle\Entity\Participante
 *
 * @ORM\Entity(repositoryClass="JuegosBA\ResultadoBundle\Entity\Repository\ParticipanteRepository")
 *
 */
class Participante extends Persona
{
    /**
    * @ORM\ManyToMany(targetEntity="Equipo", inversedBy="participantes")
    * @ORM\JoinTable(name="services_juegosba_final.equipo_participante")
    */
    private $equipos;

    /**
     * @var string $rol
     *
     * @ORM\Column(name="rol", type="string", length=100)
     */
    protected $rol;

    /**
     * Constructor
     */
    public function __construct($user=null)
    {
        $this->equipos = new \Doctrine\Common\Collections\ArrayCollection();
        parent::__construct($user);
    }
    
    /**
     * Set equipo
     *
     * @param \JuegosBA\ResultadoBundle\Entity\Equipo $equipo
     * @return Participante
     */
    public function setEquipo(\JuegosBA\ResultadoBundle\Entity\Equipo $equipo = null)
    {
        $this->equipos = $equipo;
        return $this;
    }

    /**
     * Get equipo
     *
     * @return \JuegosBA\ResultadoBundle\Entity\Equipo 
     */
    public function getEquipos()
    {
        return $this->equipos;
    }
    
    /**
     * Set rol
     *
     * @param string $rol
     * @return Evento
     */
    public function setRol($rol)
    {
        $this->rol = $rol;

        return $this;
    }

    /**
     * Get rol
     *
     * @return string 
     */
    public function getRol()
    {
        return $this->rol;
    }
    

    
    /**
     * validarAsignacion
     * valida que el participante no este en dos equipos del mismo torneo
     * 
     */
    public function validarAsignacion($participante)
    {
        $torneos = new \Doctrine\Common\Collections\ArrayCollection();
        foreach ( $this->getEquipos() as $item ){
            $torneos->add($item->getEvento()->getTorneo()->getArea());
        }
        
        foreach ( $participante->getEquipos() as $item ){
            if (true === $torneos->contains($item->getEvento()->getTorneo()->getArea())) {
                return false;
            }
        }
        return true;
    }    
    

    /**
     * Add equipo
     *
     * @param \JuegosBA\ResultadoBundle\Entity\Equipo $equipo
     * @return Participante
     */
    public function addEquipo(\JuegosBA\ResultadoBundle\Entity\Equipo $equipo)
    {
        $this->equipos[] = $equipo;

        return $this;
    }

    /**
     * Remove equipo
     *
     * @param \JuegosBA\ResultadoBundle\Entity\Equipo $equipo
     */
    public function removeEquipo(\JuegosBA\ResultadoBundle\Entity\Equipo $equipo)
    {
        $this->equipos->removeElement($equipo);
    }
}
