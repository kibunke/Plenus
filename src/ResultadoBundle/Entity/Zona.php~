<?php

namespace JuegosBA\ResultadoBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * JuegosBA\ResultadoBundle\Entity\Zona
 * @ORM\Table(name="services_juegosba_final.Zona")
 * @ORM\Entity()
 */
class Zona
{
    /**
     * @var integer $id
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string $nombre
     *
     * @ORM\Column(name="nombre", type="string", length=100)
     */
    protected $nombre;
    
     /**
     * @var string $descripcion
     *
     * @ORM\Column(name="descripcion", type="text", nullable=true)
     */
    private $descripcion;
    
    /**
     * @ORM\ManyToOne(targetEntity="CompetenciaLiga", inversedBy="zonas")
     * @ORM\JoinColumn(name="liga", referencedColumnName="id")
     */       
    private $liga;
    
    /**
     * @ORM\OneToMany(targetEntity="Plaza", mappedBy="zona", cascade={"all"})
     * @ORM\OrderBy({"orden" = "ASC", "ordenNatural" = "ASC"})
     */
    private $plazas;
    
    /**
     * @ORM\OneToMany(targetEntity="Partido", mappedBy="zona", cascade={"all"})
     */
    private $partidos;
    
    /**
     * @var datetime $createdAt
     *
     * @ORM\Column(name="createdAt", type="datetime")
     */
    private $createdAt;
    
    /**
     * @ORM\ManyToOne(targetEntity="JuegosBA\SeguridadBundle\Entity\Usuario")
     * @ORM\JoinColumn(name="createdBy", referencedColumnName="id")
     */       
    private $createdBy;

    /**
     * @var datetime $updatedAt
     *
     * @ORM\Column(name="updatedAt", type="datetime", nullable=true)
     */
    private $updatedAt;

    /**
     * @ORM\ManyToOne(targetEntity="JuegosBA\SeguridadBundle\Entity\Usuario")
     * @ORM\JoinColumn(name="updatedBy", referencedColumnName="id")
     */   
    private $updatedBy;
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->eventos = new \Doctrine\Common\Collections\ArrayCollection();
        $this->createdAt = new \DateTime();
    }
    
    /**
     * __toString
     */    
    public function __toString()
    {
        return $this->getNombre();
    }
    
    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set nombre
     *
     * @param string $nombre
     * @return Categoria
     */
    public function setNombre($nombre)
    {
        $this->nombre = $nombre;

        return $this;
    }

    /**
     * Get nombre
     *
     * @return string 
     */
    public function getNombre()
    {
        return ucfirst($this->nombre);
    }

    /**
     * Get nombre
     *
     * @return string 
     */
    public function getNombreSinDetalle()
    {
        return preg_replace('#\(([\w\s]+)\)#i','',$this->getNombre());
    }
    
    /**
     * Set descripcion
     *
     * @param string $descripcion
     * @return Categoria
     */
    public function setDescripcion($descripcion)
    {
        $this->descripcion = $descripcion;

        return $this;
    }

    /**
     * Get descripcion
     *
     * @return string 
     */
    public function getDescripcion()
    {
        return $this->descripcion;
    }

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     * @return Categoria
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Get createdAt
     *
     * @return \DateTime 
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set updatedAt
     *
     * @param \DateTime $updatedAt
     * @return Categoria
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get updatedAt
     *
     * @return \DateTime 
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * Add eventos
     *
     * @param \JuegosBA\ResultadoBundle\Entity\Evento $eventos
     * @return Categoria
     */
    public function addEvento(\JuegosBA\ResultadoBundle\Entity\Evento $eventos)
    {
        $this->eventos[] = $eventos;

        return $this;
    }

    /**
     * Remove eventos
     *
     * @param \JuegosBA\ResultadoBundle\Entity\Evento $eventos
     */
    public function removeEvento(\JuegosBA\ResultadoBundle\Entity\Evento $eventos)
    {
        $this->eventos->removeElement($eventos);
    }

    /**
     * Get eventos
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getEventos()
    {
        return $this->eventos;
    }

    /**
     * Set createdBy
     *
     * @param \JuegosBA\SeguridadBundle\Entity\Usuario $createdBy
     * @return Categoria
     */
    public function setCreatedBy(\JuegosBA\SeguridadBundle\Entity\Usuario $createdBy = null)
    {
        $this->createdBy = $createdBy;

        return $this;
    }

    /**
     * Get createdBy
     *
     * @return \JuegosBA\SeguridadBundle\Entity\Usuario 
     */
    public function getCreatedBy()
    {
        return $this->createdBy;
    }

    /**
     * Set updatedBy
     *
     * @param \JuegosBA\SeguridadBundle\Entity\Usuario $updatedBy
     * @return Categoria
     */
    public function setUpdatedBy(\JuegosBA\SeguridadBundle\Entity\Usuario $updatedBy = null)
    {
        $this->updatedBy = $updatedBy;

        return $this;
    }

    /**
     * Get updatedBy
     *
     * @return \JuegosBA\SeguridadBundle\Entity\Usuario 
     */
    public function getUpdatedBy()
    {
        return $this->updatedBy;
    }
    
    /**
     * Set liga
     *
     * @param \JuegosBA\ResultadoBundle\Entity\CompetenciaLiga $liga
     * @return Zona
     */
    public function setLiga(\JuegosBA\ResultadoBundle\Entity\CompetenciaLiga $liga = null)
    {
        $this->liga = $liga;

        return $this;
    }

    /**
     * Get liga
     *
     * @return \JuegosBA\ResultadoBundle\Entity\CompetenciaLiga 
     */
    public function getLiga()
    {
        return $this->liga;
    }
    
    /**
     * Add plaza
     *
     * @param \JuegosBA\ResultadoBundle\Entity\Plaza $plaza
     * @return Competencia
     */
    public function addPlazas(\JuegosBA\ResultadoBundle\Entity\Plaza $plaza)
    {
        $this->plazas[] = $plaza;
        $plaza->setZona($this);

        return $this;
    }

    /**
     * Remove plaza
     *
     * @param \JuegosBA\ResultadoBundle\Entity\Plaza $plaza
     */
    public function removePlazas(\JuegosBA\ResultadoBundle\Entity\Plaza $plaza)
    {
        $this->plazas->removeElement($plaza);
    }

    /** 
     * Get plazas
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getPlazas()
    {
        return $this->plazas;
    }
    
    /**
     * Add partido
     *
     * @param \JuegosBA\ResultadoBundle\Entity\Partido $partido
     * @return Competencia
     */
    public function addPartido(\JuegosBA\ResultadoBundle\Entity\Partido $partido)
    {
        $this->partidos[] = $partido;
        $partido->setZona($this);

        return $this;
    }

    /**
     * Remove partido
     *
     * @param \JuegosBA\ResultadoBundle\Entity\Partido $partido
     */
    public function removePartido(\JuegosBA\ResultadoBundle\Entity\Partido $partido)
    {
        $this->partidos->removeElement($partido);
    }

    /** 
     * Get partidos
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getPartidos()
    {
        return $this->partidos;
    }

    /** 
     * Get newPartido
     *
     * @return \JuegosBA\ResultadoBundle\Entity\Partido
     */
    public function newPartido($user = null)
    {
        $entity = $this->getLiga()->newPartido($user);
        $entity->setZona($this);
        return $entity;
    }

    /** 
     * Get columnsRaw
     *
     * @return html
     */
    public function getColumnsRaw()
    {
        $html = "";
        if (count($this->getPartidos())){
            foreach ($this->getLiga()->getColumns() as $col){
                $html .= "<th class='text-center'>".$col."</th>";
            }
        }else{
            $html = "<th class='text-center'> Aún sin datos</th>";
        }
        return $html;
    }

    /**
     * recalcularOrdenNatural
     *
     * @return array
     */
    public function recalcularOrdenNatural()
    {
        return $this->getLiga()->recalcularOrdenNatural($this);
    }
    
    /**
     * Get DetalleZona
     *
     * @return array
     */
    public function getDetalleZona($plaza)
    {
        $arr = [];
        if (count($this->getPartidos())){
            $partidos = new ArrayCollection(
                array_merge($plaza->getPartidosLocal()->toArray(), $plaza->getPartidosVisitante()->toArray())
            );
            $arr = $this->getLiga()->getRow();
            foreach ($partidos as $partido){
                $arr = $partido->calculate($arr,$plaza);
            }
        }
        return $arr;
    }
    
    /**
     * Get DetalleZonaRaw
     *
     * @return string 
     */
    public function getDetalleZonaRaw($plaza)
    {
        $arr = $this->getDetalleZona($plaza);
        if (count($arr)){
            $html = "";
            foreach ($arr as $val){
                $html .= "<td class='text-center'>".$val."</td>";
            }
        }else{
            $html = "<td class='text-center'> Aún sin datos</td>";
        }
        return $html;
    }
    
    /**
     * Get state
     *
     * @return string
     */
    public function getState()
    {
        $percent = 0;
        $partidos = $this->getPartidos();
        foreach ($partidos as $partido){
            $percent += $partido->getState();
        }
        if ($percent)
            $percent = $percent/count($partidos);
            
        $plazas = $this->getPlazas();
        $plazaAsignada = 0;
        foreach ($plazas as $plaza){
            if ($plaza->getEquipo())
                $plazaAsignada++;
        }
        if ($plazaAsignada)
            $percent += ($plazaAsignada*100)/count($plazas);
        //return $percent;
        return round($percent/2,1);
    }    
}
