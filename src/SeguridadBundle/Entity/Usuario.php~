<?php

namespace UsuarioBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

use Gedmo\Mapping\Annotation as Gedmo;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Role\RoleHierarchy;
use Symfony\Component\Security\Core\Role\Role;

/**
 * UsuarioBundle\Entity\Usuario
 * 
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="UsuarioBundle\Entity\Repository\UsuarioRepository")
 * @Gedmo\Loggable 
 */

class Usuario implements UserInterface, \Serializable
{  
    /**
     * @var integer $id
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;
    
    /**
     * @var string $usuario
     *
     * @ORM\Column(name="usuario", type="string", length=50, unique=true)
     * @Gedmo\Versioned
     */
    protected $usuario;

    /**
     * @var string $password
     *
     * @ORM\Column(name="password", type="string", length=255)
     * @Gedmo\Versioned
     */
    protected $password;

    /**
     * @var string $salt
     *
     * @ORM\Column(name="salt", type="string", length=255)
     */
    private $salt;
    
    /**
     * @var string $nombre
     *
     * @ORM\Column(name="nombre", type="string", length=100)
     * @Gedmo\Versioned
     */
    protected $nombre;

    /**
     * @var string $apellido
     *
     * @ORM\Column(name="apellido", type="string", length=100)
     * @Gedmo\Versioned
     */
    protected $apellido;

    /**
     * @var string $cvpa
     *
     * @ORM\Column(name="cvpa", type="string", length=255)
     */
    private $cvpa;

    /**
     * @var integer $dni
     *
     * @ORM\Column(name="dni", type="integer")
     */
    private $dni;
    
    /**
     * @var string $historialDePassword
     *
     * @ORM\Column(name="historialDePassword", type="json_array")
     */
    private $historialDePassword;
    
    /**
     * @var integer $idPersona
     *
     * @ORM\Column(name="idPersona", type="integer")
     * @Gedmo\Versioned
     */
    protected $idPersona;
    
    /**
     * @var boolean $activo
     *
     * @ORM\Column(name="activo", type="boolean")
     * @Gedmo\Versioned
     */
    protected $activo;
     
    /**
     * @ORM\OneToMany(targetEntity="Email", mappedBy="usuario", cascade={"persist"})
     */
    private $emails;
    
    /**
     * @ORM\OneToMany(targetEntity="LogUsuario", mappedBy="usuario")
     */
    private $logs;
    
    /**
     * @ORM\OneToMany(targetEntity="\DomicilioBundle\Entity\Comunicacion", mappedBy="responsable")
     */
    private $comunicaciones;
     
    /**
     * @var boolean $logueado
     *
     * @ORM\Column(name="logueado", type="boolean")
     */
    protected $logueado;

    /**
     * @var datetime $ultimaOperacion
     *
     * @ORM\Column(name="ultimOperacion", type="datetime", nullable=true)
     */
    private $ultimaOperacion;

    /**
     * @ORM\ManyToMany(targetEntity="Rol")
     * @ORM\JoinTable(name="usuario_rol",
     *      joinColumns={@ORM\JoinColumn(name="usuario_id", referencedColumnName="id", onDelete="RESTRICT")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="rol_id", referencedColumnName="id",onDelete="RESTRICT")}
     *      )
     */
    private $roles;
    
    /**
     * @var boolean $cambiarPassword
     *
     * @ORM\Column(name="cambiarPassword", type="boolean")
     * @Gedmo\Versioned
     */
    protected $cambiarPassword;
    
    /**
     * @var datetime $createdAt
     *
     * @ORM\Column(name="createdAt", type="datetime")
     */
    private $createdAt;
    
    /**
     * @ORM\ManyToOne(targetEntity="Usuario")
     * @ORM\JoinColumn(name="createdBy", referencedColumnName="id")
     */       
    private $createdBy;

    /**
     * @var datetime $updatedAt
     *
     * @ORM\Column(name="updatedAt", type="datetime", nullable=true)
     */
    private $updatedAt;

    /**
     * @ORM\ManyToOne(targetEntity="Usuario")
     * @ORM\JoinColumn(name="updatedBy", referencedColumnName="id")
     */   
    private $updatedBy;
    
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->activo = false;
        $this->logueado = false;
        $this->createdAt = new \DateTime();
        $this->salt = md5(uniqid(null, true));
        $this->cvpa = "CA-".strtoupper(substr(md5(uniqid(null,true)), 0, 7));
        $this->emails = new \Doctrine\Common\Collections\ArrayCollection();
        $this->logs = new \Doctrine\Common\Collections\ArrayCollection();
        $this->roles = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    /**
     * __toString
     */    
    public function __toString()
    {
        return $this->getNombreCompleto() . ' (' . $this->getUsuario() . ')';
    }

    /**
     * Get nombreCompleto
     *
     * @return string 
     */
    public function getNombreCompleto()
    {
        return $this->getApellido().", ".$this->getNombre();
    }
    
    /**
     * Get Roles implement Interface
     *
     * @return Array 
     */    
    public function getRoles()
    {
        $roles = array();
        foreach($this->roles as $rol)
        {
           $roles[] = $rol->getNombre(); 
        }        
        return $roles;
    }
    
    /**
     * implement Interface
     *
     */    
    public function eraseCredentials()
    {
        
    }
    
    /**
     * implement Interface
     *
     */        
    public function serialize()
    {
        return serialize(array($this->getId(),$this->getUsername(),$this->getActivo()));
    }
    
    /**
     * implement Interface
     *
     */        
    public function unserialize($data)
    {
        list($this->id,$this->usuario,$this->activo)= unserialize($data);
    }
    
    /**
     * implement Interface
     *
     */     
    public function getUsername()
    {
       return $this->getUsuario();
    }
    
    /**
     * implement Interface
     */     
    public function getSalt()
    {
        return $this->salt;
    }
    
    /**
     * implement Interface
     *
     */         
    public function getPassword()
    {
        return $this->password;
    }
    
    /**
     * Get ultimoLogin
     *
     * @return array
     */
    public function getUltimoLogin()
    {
        return "Obtener el ultimo registros del log para el usuario";
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set usuario
     *
     * @param string $usuario
     *
     * @return Usuario
     */
    public function setUsuario($usuario)
    {
        $this->usuario = $usuario;

        return $this;
    }

    /**
     * Get usuario
     *
     * @return string
     */
    public function getUsuario()
    {
        return $this->usuario;
    }

    /**
     * Set password
     *
     * @param string $password
     *
     * @return Usuario
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Set salt
     *
     * @param string $salt
     *
     * @return Usuario
     */
    public function setSalt($salt)
    {
        $this->salt = $salt;

        return $this;
    }

    /**
     * Set nombre
     *
     * @param string $nombre
     *
     * @return Usuario
     */
    public function setNombre($nombre)
    {
        $this->nombre = $nombre;

        return $this;
    }

    /**
     * Get nombre
     *
     * @return string
     */
    public function getNombre()
    {
        return $this->nombre;
    }

    /**
     * Set apellido
     *
     * @param string $apellido
     *
     * @return Usuario
     */
    public function setApellido($apellido)
    {
        $this->apellido = $apellido;

        return $this;
    }

    /**
     * Get apellido
     *
     * @return string
     */
    public function getApellido()
    {
        return $this->apellido;
    }

    /**
     * Set dni
     *
     * @param integer $dni
     *
     * @return Usuario
     */
    public function setDni($dni)
    {
        $this->dni = $dni;

        return $this;
    }

    /**
     * Get dni
     *
     * @return integer
     */
    public function getDni()
    {
        return $this->dni;
    }    
    
    /**
     * Set cvpa
     *
     * @param string $cvpa
     *
     * @return Usuario
     */
    public function setCvpa($cvpa)
    {
        $this->cvpa = $cvpa;

        return $this;
    }

    /**
     * Get cvpa
     *
     * @return string
     */
    public function getCvpa()
    {
        return $this->cvpa;
    }

    /**
     * Set historialDePassword
     *
     * @param array $historialDePassword
     *
     * @return Usuario
     */
    public function setHistorialDePassword($historialDePassword)
    {
        $this->historialDePassword = $historialDePassword;

        return $this;
    }

    /**
     * Get historialDePassword
     *
     * @return array
     */
    public function getHistorialDePassword()
    {
        return $this->historialDePassword;
    }

    /**
     * Set idPersona
     *
     * @param integer $idPersona
     *
     * @return Usuario
     */
    public function setIdPersona($idPersona)
    {
        $this->idPersona = $idPersona;

        return $this;
    }

    /**
     * Get idPersona
     *
     * @return integer
     */
    public function getIdPersona()
    {
        return $this->idPersona;
    }

    /**
     * Set activo
     *
     * @param boolean $activo
     *
     * @return Usuario
     */
    public function setActivo($activo)
    {
        $this->activo = $activo;

        return $this;
    }

    /**
     * Get activo
     *
     * @return boolean
     */
    public function getActivo()
    {
        return $this->activo;
    }

    /**
     * Set CambiarPassword
     *
     * @param boolean $cambiarPassword
     *
     * @return Usuario
     */
    public function setCambiarPassword($cambiarPassword)
    {
        $this->cambiarPassword = $cambiarPassword;

        return $this;
    }

    /**
     * Get CambiarPassword
     *
     * @return boolean
     */
    public function getCambiarPassword()
    {
        return $this->cambiarPassword;
    }
    
    /**
     * Set logueado
     *
     * @param boolean $logueado
     *
     * @return Usuario
     */
    public function setLogueado($logueado)
    {
        $this->logueado = $logueado;

        return $this;
    }

    /**
     * Get logueado
     *
     * @return boolean
     */
    public function getLogueado()
    {
        return $this->logueado;
    }

    /**
     * Set ultimaOperacion
     *
     * @param \DateTime $ultimaOperacion
     *
     * @return Usuario
     */
    public function setUltimaOperacion($ultimaOperacion)
    {
        $this->ultimaOperacion = $ultimaOperacion;

        return $this;
    }

    /**
     * Get ultimaOperacion
     *
     * @return \DateTime
     */
    public function getUltimaOperacion()
    {
        return $this->ultimaOperacion;
    }

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     *
     * @return Usuario
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Get createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set updatedAt
     *
     * @param \DateTime $updatedAt
     *
     * @return Usuario
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * Add email
     *
     * @param \UsuarioBundle\Entity\Email $email
     *
     * @return Usuario
     */
    public function addEmail(\UsuarioBundle\Entity\Email $email)
    {
        $email->setUsuario($this);
        $this->emails[] = $email;

        return $this;
    }

    /**
     * Remove email
     *
     * @param \UsuarioBundle\Entity\Email $email
     */
    public function removeEmail(\UsuarioBundle\Entity\Email $email)
    {
        $this->emails->removeElement($email);
    }

    /**
     * Get emails
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getEmails()
    {
        return $this->emails;
    }

    /**
     * Add log
     *
     * @param \UsuarioBundle\Entity\LogUsuario $log
     *
     * @return Usuario
     */
    public function addLog(\UsuarioBundle\Entity\LogUsuario $log)
    {
        $this->logs[] = $log;

        return $this;
    }

    /**
     * Remove log
     *
     * @param \UsuarioBundle\Entity\LogUsuario $log
     */
    public function removeLog(\UsuarioBundle\Entity\LogUsuario $log)
    {
        $this->logs->removeElement($log);
    }

    /**
     * Get logs
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getLogs()
    {
        return $this->logs;
    }

    /**
     * Add role
     *
     * @param \UsuarioBundle\Entity\Rol $role
     *
     * @return Usuario
     */
    public function addRole(\UsuarioBundle\Entity\Rol $role)
    {
        $this->roles[] = $role;

        return $this;
    }

    /**
     * Remove role
     *
     * @param \UsuarioBundle\Entity\Rol $role
     */
    public function removeRole(\UsuarioBundle\Entity\Rol $role)
    {
        $this->roles->removeElement($role);
    }

    /**
     * Set createdBy
     *
     * @param \UsuarioBundle\Entity\Usuario $createdBy
     *
     * @return Usuario
     */
    public function setCreatedBy(\UsuarioBundle\Entity\Usuario $createdBy = null)
    {
        $this->createdBy = $createdBy;

        return $this;
    }

    /**
     * Get createdBy
     *
     * @return \UsuarioBundle\Entity\Usuario
     */
    public function getCreatedBy()
    {
        return $this->createdBy;
    }

    /**
     * Set updatedBy
     *
     * @param \UsuarioBundle\Entity\Usuario $updatedBy
     *
     * @return Usuario
     */
    public function setUpdatedBy(\UsuarioBundle\Entity\Usuario $updatedBy = null)
    {
        $this->updatedBy = $updatedBy;

        return $this;
    }

    /**
     * Get updatedBy
     *
     * @return \UsuarioBundle\Entity\Usuario
     */
    public function getUpdatedBy()
    {
        return $this->updatedBy;
    }
    
    /**
     * Existe e-mail
     *
     * @return boolean
     */
    public function existeEmail($em)
    {
        foreach ($this->emails as $email){
            if ($email->getCasilla() == $em){
                return true;
            }
        }
        return false;
    }
    
    /**
     * Get emailPrincipal
     *
     * @return string
     */
    public function getEmailEnvio($em)
    {
        foreach ($this->emails as $email){
            if ($email->getCasilla() == $em){
                return $email->getCasilla();
            }            
            //if ($email->getActivo())
            //    $arr[]=$email->getCasilla();
        }
        return "";
    }

    /**
     * Get ultimaPassGenerada
     *
     * @return string
     */
    public function getUltimaPassGenerada()
    {
        $passwords = $this->getHistorialDePassword();
        $ultima = array_pop($passwords);
        return $ultima['pass'];
    }
    
    /**
     * Get primerEmail
     *
     * @return Email
     * 
     * Retorna el primer e-mail de cortesía declarado
     */
    public function getPrimerEmail(){
        $emails = $this->getEmails()->toArray();
        return $emails[0];
    }
}
