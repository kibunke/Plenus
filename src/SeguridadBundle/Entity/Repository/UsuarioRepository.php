<?php

namespace SeguridadBundle\Entity\Repository;

/**
 * UsuarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsuarioRepository extends \Doctrine\ORM\EntityRepository
{
    public function dataTable($request,$user,$auth_checker)
    {
        return array(
                        "total"    => $this->getTotalRows($user,$auth_checker),
                        "filtered" => $this->getFilteredRows($request,$user,$auth_checker),
                        "rows"     => $this->getRows($request,$user,$auth_checker)
                    );
    }
    
    private function getAdmins()
    {
         $admins = $this->getEntityManager()
                        ->createQuery(" SELECT u.id
                                          FROM SeguridadBundle:Usuario u
                                          JOIN u.perfil f
                                          JOIN f.roles r
                                         WHERE r.name = 'ROLE_ADMIN'
                                    ")
                        ->getArrayResult();
     
        return implode(',',array_map('current',$admins));
     
    }
    
    public function getRows($request,$user,$auth_checker)
    {
        $columns = ["u.id","u.ico","u.username","p.apellido","p.dni","m.nombre","f.name","u.isActive","info","pass","actions"];
        $where   = "(u.username LIKE ?1 OR p.apellido LIKE ?1 OR p.nombre LIKE ?1 OR p.dni LIKE ?1 OR f.name LIKE ?1 OR m.nombre LIKE ?1)";
            
        if(!$auth_checker->isGranted('ROLE_ADMIN'))
        {
            $where .= " AND (m.id = " . $user->getPersona()->getMunicipio()->getId() . ") AND (r.name = 'ROLE_INSCRIPTOR') AND (u.id NOT IN (" . $this->getAdmins() . "))";
        }
        
        return $this->getEntityManager()
                    ->createQuery(" SELECT u
                                      FROM SeguridadBundle:Usuario u
                                      JOIN u.persona p
                                      JOIN u.perfil f
                                      LEFT JOIN f.roles r
                                      JOIN p.municipio m
                                     WHERE $where
                                     GROUP BY u.id
                                  ORDER BY ".$columns[$request->get('order')[0]['column']]." ".$request->get('order')[0]['dir'])
                    ->setParameter(1,'%'.$request->get('search')['value'].'%')
                    ->setMaxResults($request->get('length'))
                    ->setFirstResult($request->get('start'))
                    ->getResult();
    }
    
    public function getFilteredRows($request,$user,$auth_checker)
    {
        $where = "(u.username LIKE ?1 OR p.apellido LIKE ?1 OR p.nombre LIKE ?1 OR p.dni LIKE ?1 OR f.name LIKE ?1 OR m.nombre LIKE ?1)";
                
        if(!$auth_checker->isGranted('ROLE_ADMIN'))
        {
            $where .= " AND (m.id = " . $user->getPersona()->getMunicipio()->getId() . ") AND (r.name = 'ROLE_INSCRIPTOR') AND (u.id NOT IN (" . $this->getAdmins() . "))";
        }
        
        return $this->getEntityManager()
                    ->createQuery(" SELECT COUNT(DISTINCT(u))
                                      FROM SeguridadBundle:Usuario u
                                      JOIN u.persona p
                                      JOIN u.perfil f
                                      LEFT JOIN f.roles r
                                      JOIN p.municipio m
                                     WHERE $where ")
                    ->setParameter(1,'%'.$request->get('search')['value'].'%')
                    ->getSingleScalarResult();
    }
    
    public function getTotalRows($user,$auth_checker)
    {
        $where = "1 = 1";
        
        if(!$auth_checker->isGranted('ROLE_ADMIN'))
        {
            $where .= " AND (m.id = " . $user->getPersona()->getMunicipio()->getId() . ") AND (r.name = 'ROLE_INSCRIPTOR') AND (u.id NOT IN (" . $this->getAdmins() . "))";
        }
        
        return $this->getEntityManager()
                    ->createQuery(" SELECT COUNT(DISTINCT(u))
                                      FROM SeguridadBundle:Usuario u
                                      JOIN u.persona p
                                      JOIN u.perfil f
                                      LEFT JOIN f.roles r
                                      JOIN p.municipio m
                                     WHERE $where ")
                    ->getSingleScalarResult();
    }
    
    public function dataTablePersonaSinUser($request)
    {
        return array(
                        "total"    => $this->getTotalPersonaSinUserRows($request),
                        "filtered" => $this->getFilteredPersonaSinUserRows($request),
                        "rows"     => $this->getPersonaSinUserRows($request)
                    );
    }
    
    public function getPersonaSinUserRows($request)
    {
        $columns = ["p.id","p.apellido","p.nombre", "p.dni","m.nombre","actions"];
            
        return $this->getEntityManager()
                    ->createQuery(" SELECT p
                                      FROM CommonBundle:Persona p
                                      JOIN p.municipio m
                                     WHERE p.id NOT IN (SELECT p2.id FROM SeguridadBundle:Usuario u INNER JOIN u.persona p2) AND (p.apellido LIKE ?1 OR p.nombre LIKE ?1 OR p.dni LIKE ?1 OR m.nombre LIKE ?1)
                                  ORDER BY ".$columns[$request->get('order')[0]['column']]." ".$request->get('order')[0]['dir'])
                    ->setParameter(1,'%'.$request->get('search')['value'].'%')
                    ->setMaxResults($request->get('length'))
                    ->setFirstResult($request->get('start'))
                    ->getResult();
    }
    
    public function getFilteredPersonaSinUserRows($request)
    {
        return $this->getEntityManager()
                    ->createQuery(" SELECT COUNT(DISTINCT(p))
                                      FROM CommonBundle:Persona p
                                      JOIN p.municipio m
                                     WHERE p.id NOT IN (SELECT p2.id FROM SeguridadBundle:Usuario u INNER JOIN u.persona p2) AND (p.apellido LIKE ?1 OR p.nombre LIKE ?1 OR p.dni LIKE ?1 OR m.nombre LIKE ?1)")
                    ->setParameter(1,'%'.$request->get('search')['value'].'%')
                    ->getSingleScalarResult();
    }
    
    
    public function getTotalPersonaSinUserRows()
    {
        return $this->getEntityManager()
                    ->createQuery("SELECT COUNT(DISTINCT(p))
                                      FROM CommonBundle:Persona p
                                      JOIN p.municipio m
                                     WHERE p.id NOT IN (SELECT p2.id FROM SeguridadBundle:Usuario u INNER JOIN u.persona p2)")
                    ->getSingleScalarResult();
    }
    

}