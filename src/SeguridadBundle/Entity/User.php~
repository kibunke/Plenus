<?php

namespace UserControlBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\AdvancedUserInterface;
use Symfony\Component\Security\Core\Role\RoleHierarchy;
use Symfony\Component\Validator\Constraints as Assert;
//use Symfony\Component\Security\Core\Role\Role;

/**
 * UserControlBundle\Entity\User
 * 
 * @ORM\Table(name="plenus_admin.User")
 * @ORM\Entity(repositoryClass="UserControlBundle\Entity\Repository\UserRepository")
 */
class User implements AdvancedUserInterface, \Serializable
{  
    /**
     * @var integer $id
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;
    
    /**
     * @var string $username
     *
     * @ORM\Column(name="username", type="string", length=50, unique=true)
     */
    protected $username;

    /**
     * @var string $password
     *
     * @ORM\Column(name="password", type="string", length=255)
     */
    protected $password;

    /**
     * @var string $salt
     *
     * @ORM\Column(name="salt", type="string", length=255)
     */
    private $salt;
    
    /**
     * @var string $passwordHistory
     *
     * @ORM\Column(name="passwordHistory", type="json_array")
     */
    private $passwordHistory;
    
    /**
     * @ORM\OneToMany(targetEntity="Log", mappedBy="user")
     */
    private $logs;
     
    /**
     * @var boolean $logged
     *
     * @ORM\Column(name="logged", type="boolean")
     */
    protected $logged;

    /**
     * @var datetime $lastActivity
     *
     * @ORM\Column(name="lastActivity", type="datetime", nullable=true)
     */
    private $lastActivity;

    /**
     * @ORM\ManyToMany(targetEntity="Role")
     * @ORM\JoinTable(name="user_role",
     *      joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id", onDelete="RESTRICT")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="rol_id", referencedColumnName="id",onDelete="RESTRICT")}
     *      )
     */
    private $roles;
    
    /**
     * @ORM\ManyToOne(targetEntity="Profile", inversedBy="users")
     */
    private $profile;
    
    /**
     * @ORM\OneToOne(targetEntity="CommonBundle\Entity\Person", inversedBy="user")
     * @ORM\JoinColumn(name="person_id", referencedColumnName="id")
     */
    private $person;
    
    /**
     * @var boolean $changePassword
     *
     * @ORM\Column(name="changePassword", type="boolean")
     */
    protected $changePassword;
    
    /**
     * @var datetime $createdAt
     *
     * @ORM\Column(name="createdAt", type="datetime")
     * @Assert\Date()
     */
    private $createdAt;
    
    /**
     * @var User $createdBy
     * 
     * @ORM\ManyToOne(targetEntity="User")
     * @ORM\JoinColumn(name="createdBy", referencedColumnName="id")
     */
    private $createdBy;

    /**
     * @var datetime $updatedAt
     *
     * @ORM\Column(name="updatedAt", type="datetime", nullable=true)
     * @Assert\Date()
     */
    private $updatedAt;

    /**
     * @var User $updatedBy
     * 
     * @ORM\ManyToOne(targetEntity="User")
     * @ORM\JoinColumn(name="updatedBy", referencedColumnName="id")
     */   
    private $updatedBy;

    /**
     * @var boolean $isActive
     *
     * @ORM\Column(name="isActive", type="boolean")
     */
    protected $isActive;
    
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->createdAt = new \DateTime();
        $this->isActive = true;
        $this->logged = false;// Si puedo deducirlo de la session esto no tiene sentido
        $this->salt = md5(uniqid(null, true));
        $this->logs = new \Doctrine\Common\Collections\ArrayCollection();
        $this->roles = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    /**
     * __toString
     */    
    public function __toString()
    {
        return $this->username;
    }
    
    /**
     * Get Roles implement Interface
     *
     * @return Array 
     */    
    public function getRoles()
    {
        $roles = array();
        //Agrega los roles del perfil
        if ($this->getProfile()){
            foreach($this->getProfile()->getRoles() as $rol)
            {
               $roles[] = $rol->getName(); 
            }
        }
        //Agrega los roles asignados especificamente al usuario
        foreach($this->roles as $rol)
        {
           $roles[] = $rol->getName(); 
        }        
        return $roles;
    }
    
    /**
     * implement Interface
     */    
    public function eraseCredentials()
    {
    }
    
    /**
     * implement Interface
     *  
     * @see \Serializable::serialize()
     */
    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->username,
            $this->password,
            $this->isActive
            // see section on salt below
            // $this->salt,
        ));
    }
    
    /**
     * implement Interface
     *     
     * @see \Serializable::unserialize()
    */
    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->username,
            $this->password,
            $this->isActive
            // see section on salt below
            // $this->salt
        ) = unserialize($serialized);
    }
    
    /**
     * implement Interface
     */    
    public function isAccountNonExpired()
    {
        return true;
    }
    
    /**
     * implement Interface
     */     
    public function isAccountNonLocked()
    {
        return true;
    }
    
    /**
     * implement Interface
     */     
    public function isCredentialsNonExpired()
    {
        return true;
    }
    
    /**
     * implement Interface
     */     
    public function isEnabled()
    {
        return $this->isActive;
    }    

    /**
     * implement Interface
     *
     */     
    public function getUsername()
    {
       return $this->username;
    }
    
    /**
     * implement Interface
     */     
    public function getSalt()
    {
        return $this->salt;
    }
    
    /**
     * implement Interface
     *
     */
    public function getPassword()
    {
        return $this->password;
    }
}
